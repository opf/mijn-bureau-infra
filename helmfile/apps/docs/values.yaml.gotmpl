{{ $hostname := printf "%s.%s" .Values.global.hostname.docs .Values.global.domain }}

global:
  security:
    allowInsecureImages: true

  imagePullSecrets:
    - name: {{ (coalesce .Values.container.docs.imagePullSecret .Values.container.default.imagePullSecret) | quote }}

commonLabels:
  app.kubernetes.io/part-of: docs

clusterDomain: {{ .Values.cluster.networking.domain }}

backend:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.backend.repository | quote }}
    tag: {{ .Values.container.docs.backend.tag | quote }}
  replicaCount: 1
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  runtimeClassName: {{ .Values.cluster.runtimeClassName | quote }}
  pdb:
    maxUnavailable: 1
  autoscaling:
    hpa: {{ .Values.autoscaling.horizontal.docs.backend | toYaml | nindent 6 }}
    vpa: {{ .Values.autoscaling.vertical.docs.backend | toYaml | nindent 6 }}
  networkPolicy:
    extraEgress:
      # Database connectivity
      - ports:
          - port: {{ .Values.database.docs.port }}
            protocol: TCP
        {{- if .Values.database.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: postgresql
                app.kubernetes.io/component: primary
        {{- end }}
      # Redis connectivity
      - ports:
          - port: {{ .Values.cache.docs.port }}
            protocol: TCP
        {{- if .Values.cache.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: redis
                app.kubernetes.io/component: master
        {{- end }}
      # MinIO connectivity
      - ports:
          - port: {{ .Values.objectstore.docs.port }}
            protocol: TCP
        {{- if .Values.objectstore.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: minio
        {{- end }}
      # Allow https egress for keycloak connection
      - ports:
          - port: 443
      # Allow http egress for yProvider connection
      - ports:
          - port: 4444
  configuration:
    ai:
      enabled: {{ not (empty .Values.ai.llm.model) }}
      allowReachFrom: "authenticated"
      apiKey: {{ .Values.ai.llm.apiKey }}
      baseUrl: {{ .Values.ai.llm.endpoint }}
      model: {{ .Values.ai.llm.model }}
    django:
      cors:
        allowAllOrigins: false
        allowedOriginRegexes: ""
        allowedOrigins: {{ printf "http%s://%s:%d" (ternary "s" "" (.Values.global.tls.enabled | default true)) $hostname }}
      email:
        brandName: {{ .Values.smtp.from.name }}
        from: {{ .Values.smtp.from.email }}
        host:
          name: {{ .Values.smtp.host }}
          username: {{ .Values.smtp.username }}
          password: {{ .Values.smtp.password }}
        logoImg: {{ .Values.smtp.from.logoImage }}
        port: {{ .Values.smtp.port }}
        useTls: {{ .Values.smtp.tls.enabled }}
      secretKey: {{ .Values.application.docs.backend.django.secretKey }}
      superUser:
        email: {{ .Values.secret.docs.superUser.email }}
        password: {{ .Values.secret.docs.superUser.password }}
      storagesStaticFilesBackend: django.contrib.staticfiles.storage.StaticFilesStorage
    languageCode: {{ .Values.global.defaultLocale | default "nl" }}
    themeCustomization:
      enabled: true
      fileContent: |
        {
          "translations": {
              "en": {
                "translation": {
                  "Docs": "Mijn Bureau Docs",
                  "New doc": "+"
                }
              }
            },
          "footer": {
            "default": {
              "logo": {
                "src": "/assets/icon-docs.svg",
                "width": "54px",
                "alt": "Docs Logo",
                "withTitle": true
              },
              "externalLinks": [
                {
                  "label": "GitHub",
                  "href": "https://github.com/suitenumerique/docs/"
                },
                {
                  "label": "DINUM",
                  "href": "https://www.numerique.gouv.fr/dinum/"
                },
                {
                  "label": "ZenDiS",
                  "href": "https://zendis.de/"
                },
                {
                  "label": "BlockNote.js",
                  "href": "https://www.blocknotejs.org/"
                }
              ],
              "bottomInformation": {
                "label": "Unless otherwise stated, all content on this site is under",
                "link": {
                  "label": "licence etalab-2.0",
                  "href": "https://github.com/etalab/licence-ouverte/blob/master/LO.md"
                }
              }
            },
            "en": {
              "legalLinks": [
                {
                  "label": "Legal Notice",
                  "href": "#"
                },
                {
                  "label": "Personal data and cookies",
                  "href": "#"
                },
                {
                  "label": "Accessibility",
                  "href": "#"
                }
              ],
              "bottomInformation": {
                "label": "Unless otherwise stated, all content on this site is under",
                "link": {
                  "label": "licence MIT",
                  "href": "https://github.com/suitenumerique/docs/blob/main/LICENSE"
                }
              }
            },
            "fr": {
              "legalLinks": [
                {
                  "label": "Mentions légales",
                  "href": "#"
                },
                {
                  "label": "Données personnelles et cookies",
                  "href": "#"
                },
                {
                  "label": "Accessibilité",
                  "href": "#"
                }
              ],
              "bottomInformation": {
                "label": "Sauf mention contraire, tout le contenu de ce site est sous",
                "link": {
                  "label": "licence MIT",
                  "href": "https://github.com/suitenumerique/docs/blob/main/LICENSE"
                }
              }
            },
            "de": {
              "legalLinks": [
                {
                  "label": "Impressum",
                  "href": "#"
                },
                {
                  "label": "Personenbezogene Daten und Cookies",
                  "href": "#"
                },
                {
                  "label": "Barrierefreiheit",
                  "href": "#"
                }
              ],
              "bottomInformation": {
                "label": "Sofern nicht anders angegeben, steht der gesamte Inhalt dieser Website unter",
                "link": {
                  "label": "licence MIT",
                  "href": "https://github.com/suitenumerique/docs/blob/main/LICENSE"
                }
              }
            },
            "nl": {
              "legalLinks": [
                {
                  "label": "Wettelijke bepalingen",
                  "href": "#"
                },
                {
                  "label": "Persoonlijke gegevens en cookies",
                  "href": "#"
                },
                {
                  "label": "Toegankelijkheid",
                  "href": "#"
                }
              ],
              "bottomInformation": {
                "label": "Tenzij anders vermeld, is alle inhoud van deze site ondergebracht onder",
                "link": {
                  "label": "licence MIT",
                  "href": "https://github.com/suitenumerique/docs/blob/main/LICENSE"
                }
              }
            }
          }
        }"
  celery:
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
    resources: {{ .Values.resource.docs.celery | toYaml | nindent 6 }}
    podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 6 }}
    containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 6 }}
    runtimeClassName: {{ .Values.cluster.runtimeClassName | quote }}
    autoscaling:
      hpa: {{ .Values.autoscaling.horizontal.docs.celery | toYaml | nindent 8 }}
      vpa: {{ .Values.autoscaling.vertical.docs.celery | toYaml | nindent 8 }}
    networkPolicy:
      extraEgress:
        # Database connectivity
        - ports:
            - port: {{ .Values.database.docs.port }}
              protocol: TCP
          {{- if .Values.database.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/component: primary
          {{- end }}
        # Redis connectivity
        - ports:
            - port: {{ .Values.cache.docs.port }}
              protocol: TCP
          {{- if .Values.cache.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: redis
                  app.kubernetes.io/component: master
          {{- end }}
        # MinIO connectivity
        - ports:
            - port: {{ .Values.objectstore.docs.port }}
              protocol: TCP
          {{- if .Values.objectstore.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: minio
          {{- end }}
    configuration:
      concurrency:
        min: 3
        max: 9

frontend:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.frontend.repository | quote }}
    tag: {{ .Values.container.docs.frontend.tag | quote }}
  replicaCount: 1
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  runtimeClassName: {{ .Values.cluster.runtimeClassName | quote }}
  pdb:
    maxUnavailable: 1
  autoscaling:
    hpa: {{ .Values.autoscaling.horizontal.docs.frontend | toYaml | nindent 6 }}
    vpa: {{ .Values.autoscaling.vertical.docs.frontend | toYaml | nindent 6 }}
  configuration:
    publishAsMit: {{ .Values.application.docs.frontend.publishAsMit }}

yProvider:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.yProvider.repository | quote }}
    tag: {{ .Values.container.docs.yProvider.tag | quote }}
  replicaCount: 1
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  runtimeClassName: {{ .Values.cluster.runtimeClassName | quote }}
  pdb:
    maxUnavailable: 1
  autoscaling:
    hpa: {{ .Values.autoscaling.horizontal.docs.yProvider | toYaml | nindent 6 }}
    vpa: {{ .Values.autoscaling.vertical.docs.yProvider | toYaml | nindent 6 }}
  networkPolicy:
    extraEgress:
      # Database connectivity
      - ports:
          - port: {{ .Values.database.docs.port }}
            protocol: TCP
        {{- if .Values.database.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: postgresql
                app.kubernetes.io/component: primary
        {{- end }}
      # Redis connectivity
      - ports:
          - port: {{ .Values.cache.docs.port }}
            protocol: TCP
        {{- if .Values.cache.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: redis
                app.kubernetes.io/component: master
        {{- end }}
      # MinIO connectivity
      - ports:
          - port: {{ .Values.objectstore.docs.port }}
            protocol: TCP
        {{- if .Values.objectstore.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: minio
        {{- end }}
      # Allow https egress for backend connection
      - ports:
          - port: 443
  configuration:
    api:
      key: {{ .Values.application.docs.yProvider.key }}
    caches:
      keyPrefix: {{ now | unixEpoch | quote }}

ingress:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressAdmin:
  enabled: true
  hostname: {{ .Values.global.hostname.docs }}.{{ .Values.global.domain }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressCollaborationApi:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressCollaborationWS:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/enable-websocket: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
    nginx.ingress.kubernetes.io/upstream-hash-by: $arg_room
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/timeout-tunnel: "86400"
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressCollaborationsApi:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/upstream-hash-by: $arg_room
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressMedia:
  enabled: true
  pathType: Prefix
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  path: /media
  extraPaths:
    - path: /media-auth
      pathType: Prefix
      backend:
        service:
          name: docs-nginx
          port:
            name: http
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Content-Security-Policy "default-src 'none'" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

collaboration:
  api:
    secret: {{ .Values.application.docs.collaboration.secret }}
  webSockets:
    notConnectedReadOnly: true

auth:
  oidc:
    userInfo:
      shortNameField: {{ .Values.authentication.oidc.claims.given_name }}
      fullNameField: {{ .Values.authentication.oidc.claims.display_name }}
    openIdProvider:
      jwksEndpoint: {{ .Values.authentication.oidc.jwks_uri }}
      authorizationEndpoint: {{ .Values.authentication.oidc.authorization_endpoint }}
      tokenEndpoint: {{ .Values.authentication.oidc.token_endpoint }}
      userEndpoint: {{ .Values.authentication.oidc.userinfo_endpoint }}
      logoutEndpoint: {{ .Values.authentication.oidc.end_session_endpoint }}
    relyingParty:
      clientId: {{ .Values.authentication.client.docs.client_id }}
      clientSecret: {{ .Values.authentication.client.docs.client_secret }}
      signAlgo: RS256
      scopes: "openid email"

database:
  engine: {{ .Values.database.docs.engine }}
  host: {{ .Values.database.docs.host }}
  port: {{ .Values.database.docs.port }}
  name: {{ .Values.database.docs.name }}
  user: {{ .Values.database.docs.user }}
  password: {{ .Values.database.docs.password }}

redis:
  url: {{ printf "redis://default:%s@%s:%d/1" .Values.cache.docs.password .Values.cache.docs.host .Values.cache.docs.port }}

awsS3:
  endpointUrl: {{ printf "http%s://%s:%d" (ternary "s" "" .Values.objectstore.docs.useSSL) .Values.objectstore.docs.endpoint .Values.objectstore.docs.port }}
  accessKeyId: {{ .Values.objectstore.docs.username }}
  secretAccessKey: {{ .Values.objectstore.docs.rootPassword }}
  storageBucketName: {{ .Values.objectstore.docs.bucket }}
