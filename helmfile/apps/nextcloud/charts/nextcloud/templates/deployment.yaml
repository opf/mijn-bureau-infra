{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: nextcloud
  {{- if or .Values.deploymentAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.deploymentAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: nextcloud
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: nextcloud
    spec:
      {{- include "nextcloud.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "nextcloud.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "nextcloud" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "nextcloud" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.runtimeClassName }}
      runtimeClassName: {{ .Values.runtimeClassName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
        - name: "nextcloud-php-provisioning"
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          image: {{ template "nextcloud.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
            - |
              #!/bin/bash

              echo "Start provisioning"
              cp /usr/local/etc/php/php.ini-production /shared/php.ini
              mkdir -p /shared/conf.d
              echo "Setup default PHP config"
              cp /usr/local/etc/php/conf.d/*.ini /shared/conf.d/
              if [ -d /php-configs ]; then
                echo "Setup custom PHP config"
                cp /php-configs/* /shared/conf.d/
              fi
              echo "Provisioning completed"
          volumeMounts:
            - name: empty-dir
              mountPath: /shared
            {{- if .Values.phpConfigs }}
            - name: nextcloud-php-config
              mountPath: /php-configs
            {{- end }}
      containers:
        - name: "nextcloud"
          image: {{ template "nextcloud.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: NEXTCLOUD_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.secretName" . }}
                  key: {{ include "nextcloud.secretUsernameKey" . }}
            - name: NEXTCLOUD_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.secretName" . }}
                  key: {{ include "nextcloud.secretPasswordKey" . }}
            {{- if .Values.mail.enabled }}
            {{/*
            SMTP secrets
            */}}
            - name: SMTP_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "smtp.secretName" . }}
                  key: {{ include "smtp.secretUsernameKey" . }}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "smtp.secretName" . }}
                  key: {{ include "smtp.secretPasswordKey" . }}
            {{- end }}
            {{/*
            Redis secrets
            */}}
            - name: REDIS_HOST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.redis.secretName" . }}
                  key: {{ include "nextcloud.redis.secretPasswordKey" . }}
            {{/*
            MinIO secrets
            */}}
            - name: OBJECTSTORE_S3_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.minio.secretName" . }}
                  key: {{ include "nextcloud.minio.secretUsernameKey" . }}
            - name: OBJECTSTORE_S3_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.minio.secretName" . }}
                  key: {{ include "nextcloud.minio.secretPasswordKey" . }}
            {{/*
            Database secrets
            */}}
            {{- if eq .Values.externalDatabase.type "mysql" }}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.database.secretName" . }}
                  key: {{ include "nextcloud.database.secretUsernameKey" . }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.database.secretName" . }}
                  key: {{ include "nextcloud.database.secretPasswordKey" . }}
            {{- end }}
            {{- if eq .Values.externalDatabase.type "postgresql" }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.database.secretName" . }}
                  key: {{ include "nextcloud.database.secretUsernameKey" . }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nextcloud.database.secretName" . }}
                  key: {{ include "nextcloud.database.secretPasswordKey" . }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-env-vars" (include "common.names.fullname" .) }}
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
            {{- if .Values.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /status.php
              port:  {{ $.Values.containerPorts.http }}
              httpHeaders:
              - name: Host
                value: {{ $.Values.host | quote }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /status.php
              port:  {{ $.Values.containerPorts.http }}
              httpHeaders:
              - name: Host
                value: {{ $.Values.host | quote }}
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /status.php
              port:  {{ $.Values.containerPorts.http }}
              httpHeaders:
              - name: Host
                value: {{ $.Values.host | quote }}
          {{- end }}
          {{- end }}
          lifecycle:
            {{- if .Values.lifecycleHooks }}
            {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 2 }}
            {{- end }}
          volumeMounts:
            - name: post-install-dir
              mountPath: /docker-entrypoint-hooks.d/post-installation
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /usr/local/etc/php/php.ini
              subPath: php.ini
            - name: empty-dir
              mountPath: /usr/local/etc/php/conf.d
              subPath: conf.d
            - name: empty-dir
              mountPath: /var/run/apache2
              subPath: apache-run
            - name: nextcloud-data
              mountPath: /var/www/
              subPath: root
            - name: nextcloud-data
              mountPath: /var/www/html
              subPath: html
            - name: nextcloud-data
              mountPath: /var/www/html/config
              subPath: config
            - name: nextcloud-data
              mountPath: /var/www/html/custom_apps
              subPath: custom_apps
            - name: nextcloud-data
              mountPath: /var/www/tmp
              subPath: tmp
            - name: nextcloud-data
              mountPath: /var/www/html/themes
              subPath: themes
            {{- range $key, $value := .Values.builtinConfigs }}
            {{- if $value }}
            - name: nextcloud-config
              mountPath: /var/www/html/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- end }}
            - name: nextcloud-apache-config
              mountPath: /etc/apache2/ports.conf
              subPath: ports.conf
            - name: nextcloud-apache-config
              mountPath: /etc/apache2/sites-available/000-default.conf
              subPath: 000-default.conf
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: post-install-dir
          configMap:
            name: {{ (include "common.names.fullname" .) }}-script-post-install
            defaultMode: 0755
        - name: empty-dir
          emptyDir: {}
        - name: nextcloud-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "common.names.fullname" .) .Values.persistence.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: nextcloud-config
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .)  }}
          {{- if .Values.phpConfigs }}
        - name: nextcloud-php-config
          configMap:
            name: {{ printf "%s-php-config" (include "common.names.fullname" .)  }}
          {{- end }}
        - name: nextcloud-apache-config
          configMap:
            name: {{ printf "%s-apache-config" (include "common.names.fullname" .)  }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
