# OpenProject Configuration
image:
  registry: {{ (coalesce .Values.container.openproject.registry .Values.container.default.registry) | quote }}
  repository: {{ .Values.container.openproject.repository | quote }}
  tag: {{ .Values.container.openproject.tag | quote }}

openproject:
  https: {{ .Values.openproject.https }}
  admin_user:
    password: {{ .Values.openproject.admin_user.password | quote }}
    password_reset: {{ .Values.openproject.admin_user.password_reset }}
    name: {{ .Values.openproject.admin_user.name | quote }}
    mail: {{ .Values.openproject.admin_user.mail | quote }}
  seed_locale: {{ .Values.openproject.seed_locale }}

ingress:
  enabled: true
  host: {{ .Values.global.hostname.openproject }}.{{ .Values.global.domain }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  tls:
    enabled: {{ .Values.openproject.ingress.tls }}
    annotations:
  {{- if .Values.cluster.ingress.annotations }}
  {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
  {{- end }}
  {{- if eq .Values.cluster.ingress.type "nginx" }}
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  {{- end }}
  {{- if eq .Values.cluster.ingress.type "haproxy-openshift" }}
      haproxy.router.openshift.io/ssl-redirect: "true"
  {{- end }}

# Database configuration
database:
  host: {{ .Values.database.openproject.host }}
  port: {{ .Values.database.openproject.port }}
  database: {{ .Values.database.openproject.name }}
  username: {{ .Values.database.openproject.user }}
  password: {{ .Values.database.openproject.password }}

# Cache configuration (using Redis instead of Memcached)
cache:
  host: {{ .Values.cache.openproject.host }}
  port: {{ .Values.cache.openproject.port }}
  password: {{ .Values.cache.openproject.password }}

# PostgreSQL configuration (use embedded chart with our password)
postgresql:
  bundled: true
  image:
    registry: {{ coalesce .Values.container.postgres.registry .Values.container.default.registry | default "docker.io" | quote }}
    repository: {{ .Values.container.postgres.repository | default "bitnami/postgresql" | quote }}
    tag: {{ .Values.container.postgres.tag | default "17.5.0-debian-12-r18" | quote }}
  volumePermissions:
    enabled: true
    image:
      registry: "docker.io"
      repository: "alpine"
      tag: "3.19"
  auth:
    postgresPassword: {{ .Values.database.openproject.adminpassword | quote }}
    username: {{ .Values.database.openproject.user | quote }}
    password: {{ .Values.database.openproject.password | quote }}
    database: {{ .Values.database.openproject.name | quote }}

cache:
  host: {{ .Values.cache.openproject.host }}
  port: {{ .Values.cache.openproject.port }}
  password: {{ .Values.cache.openproject.password }}

redis:
  image:
    registry: {{ (coalesce .Values.container.redis.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.redis.repository | quote }}
    tag: {{ .Values.container.redis.tag | quote }}

# Disable memcached since we're using Redis
memcached:
  enabled: false
  service:
    sessionAffinity: None

oidc:
  enabled: true
  provider:
    name: "Keycloak"
    host: {{ .Values.global.hostname.keycloak }}.{{ .Values.global.domain }}
    identifier: {{ .Values.authentication.client.openproject.client_id }}
    secret: {{ .Values.authentication.client.openproject.client_secret }}
    authorization_endpoint: "{{ .Values.authentication.oidc.authorization_endpoint }}"
    token_endpoint: "{{ .Values.authentication.oidc.token_endpoint }}"
    userinfo_endpoint: "{{ .Values.authentication.oidc.userinfo_endpoint }}"
    jwks_uri: "{{ .Values.authentication.oidc.issuer }}/protocol/openid-connect/certs"
    scope: ["openid", "profile", "email"]

{{- if eq .Environment.Name "demo" }}
# Demo environment - disable SMTP for simplicity
smtp:
  enabled: false
{{- else }}
# Production environment - use SMTP
smtp:
  enabled: {{ .Values.smtp.enabled }}
  host: {{ .Values.smtp.host | quote }}
  port: {{ .Values.smtp.port }}
  protocol: {{ .Values.smtp.protocol | quote }}
  from_address: {{ .Values.smtp.fromAddress | quote }}
  tls:
    enabled: {{ .Values.smtp.tls.enabled }}
    force: {{ .Values.smtp.tls.force }}
    require_transport_security: {{ .Values.smtp.tls.requireTransportSecurity }}
  username: {{ .Values.smtp.username | quote }}
  password: {{ .Values.smtp.password | quote }}
{{- end }}

resources:
  limits:
    cpu: "4"
    memory: 4Gi
  requests:
    cpu: 250m
    memory: 1Gi

# Increase init container resources
initContainer:
  resources:
    limits:
      memory: 1Gi
    requests:
      memory: 512Mi

persistence:
  assets:
    enabled: {{ .Values.openproject.persistence.assets.enabled }}

global:
  security:
    allowInsecureImages: {{ .Values.openproject.security.allowInsecureImages }}
  defaultStorageClass: {{ coalesce .Values.pvc.openproject.openproject.storageClass .Values.pvc.default.storageClass | quote }}
  storageClass: {{ coalesce .Values.pvc.openproject.openproject.storageClass .Values.pvc.default.storageClass | quote }}
  imagePullSecrets: []

# Fix imagePullSecrets issue
imagePullSecrets: []

{{- if .Values.openproject.securityContext }}
securityContext: {{ .Values.openproject.securityContext | toYaml | nindent 2 }}
{{- end }}

{{- if .Values.openproject.containerSecurityContext }}
containerSecurityContext: {{ .Values.openproject.containerSecurityContext | toYaml | nindent 2 }}
{{- end }}

autoscaling:
  hpa: {{ .Values.autoscaling.horizontal.openproject | toYaml | nindent 4 }}

